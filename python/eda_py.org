#+OPTIONS: num:nil toc:nil H:3 \n:nil @:t ::t |:t ^:{} -:t f:t *:t skip:t d:(HIDE) tags:not-in-toc
#+HTML_HEAD: <style>pre.src{background:#eee;}</style>
#+HTML_HEAD: <style type="text/css">body{max-width:60%;}</style> 
#+HTML_HEAD: <style>code{background:#eee;}</style>
#+TITLE: Total exportations of Mexico by State and Activity
#+BABEL: :exports both
#+LANGUAGE:   en

* EDA in python

This is my first EDA in python. For now, this file is not intended to be
a publication of the results, buth rather a notebook for testing code in
an organised way. 

* Loading and translating data

#+BEGIN_SRC python :session
import pandas as pd
import numpy as np
from plotnine import *
import matplotlib.pyplot as plt
import seaborn as sb
plt.style.use('ggplot')

ex_rows = pd.read_csv("./exportations_activity_rows.csv")
ex_cols = pd.read_csv("./exportations_activity_cols.csv")

## Spanish names in a vector
categorias = pd.Series(pd.read_csv("./exportations_activity_cols.csv")
                       .columns.values[2:27])

## Shorter equivalents in English
activities_en = pd.Series(["Total", "Food", "Drinks and tobacco",
                           "Textiles", "Textile products", "Tailoring",
                           "Paper", "Chemistry", "Plastic",
                           "Minerals based", "Metal industry",
                           "Metal products","Machinery", "Electronics",
                           "Transport equipment", "Furniture",
                           "Other manufactures","Not specified", "Mining",
                           "Leather", "Wood","Printing","Electricity",
                           "Petroleum", "Petroleum products"])

## Change column names 2:27
ex_cols.columns = pd.Series(['state','year']).append(activities_en)
list(ex_cols.columns.values)
#+END_SRC

Function to translate in the rows data frame

#+BEGIN_SRC python :session
def translate (vector_es):
    vector_en = []
    for i in range(len(vector_es)):
        vector_en.append(equivalent(vector_es[i]))
        ## Need to define equivalent 
    return(vector_en)

def equivalent(expression_es):
    position = list(categorias[categorias == expression_es].index)
    ## Match expression_es in the list categorias
    expression_en = activities_en[position[0]]
    return(expression_en)

## Testing

#translate(categorias)
#translate(['Exportaciones totales', 'Industria alimentaria',
#           'Industria química'])
equivalent("Impresión e industrias conexas")
#+END_SRC


Now we just need to change the values in the data frame

#+BEGIN_SRC python :session
ex_rows = ex_rows.assign(Activity = translate(ex_rows['Descripción']))

ex_rows.head()
#+END_SRC

* EDA

To start with the EDA, let’s look at the totals by state, using 
=export.cols=

#+BEGIN_SRC python :session
(ex_rows.query('Activity == "Total"')
 .groupby('state')
 .agg({'USD':'sum'}).
 sort_values('USD', ascending=False))

(ex_cols.groupby('state')
 .agg({'Total':'sum'})
 .sort_values('Total', ascending=False))
#+END_SRC

Visual representation

#+BEGIN_SRC python :session
main_states = (ex_cols.groupby('state')
               .agg({'Total':'sum'})
               .sort_values('Total', ascending=False)
               .reset_index())
  
ggplot(main_states) + \
    geom_bar(aes('state', 'Total', fill = 'Total'), stat = 'identity') + \
    coord_flip()

## Using matplotlib
plt.figure(figsize=(15,10))
(ex_cols.groupby('state')
 .agg({'Total':'sum'})
 .sort_values('Total', ascending=False)
 .plot.bar())
plt.xlabel("States")
plt.ylabel("Total USD in exportations")
plt.xticks(fontsize=15)
#+END_SRC

Now the main categories

#+BEGIN_SRC python :session
main_act = ex_rows.query('Activity != "Total"').\
    groupby('Activity').agg({'USD':'sum'}).\
    sort_values('USD', ascending=False).\
    reset_index()

ggplot(main_act) + \
    geom_bar(aes('Activity', 'USD', fill = 'USD'), stat = 'identity') + \
    coord_flip()

plt.figure(figsize=(15,10))
(ex_rows.query('Activity != "Total"')
 .groupby('Activity')
 .agg({'USD':'sum'})
 .sort_values('USD', ascending=False)
 .plot.bar())
plt.xlabel("Activity")
plt.ylabel("Total USD in exportations")
#+END_SRC

And total exportations per year

#+BEGIN_SRC python :session
ex_cols.groupby('year').agg({'Total':'sum'}).reset_index()

## ggplot version
ggplot((ex_cols.groupby('year')
        .agg({'Total':'sum'})
        .reset_index()),
       aes('year', 'Total')) + \
    geom_line() + geom_point()

## seaborn version
plt.figure(figsize=(15,10))
ex_cols.groupby('year').\
    agg({'Total':'sum'}).\
    plot(color = 'k', linestyle = '--', marker = 'o')
plt.ylabel("Total in USD")

per_year = ex_rows.query('Activity == "Total"').\
    groupby(['year', 'state']).\
    agg({'USD':'sum'}).\
    reset_index()

## ggplot
ggplot(per_year, aes('year', 'USD')) +\
    geom_line(aes(colour = 'state')) +\
    geom_point(aes(colour = 'state'))

## We could also plot activity per year
plt.figure(figsize=(15,10))
ex_cols.groupby('year').sum().plot(marker = '*')
plt.ylabel("Total USD in exportations")

#+END_SRC

We also would like to see if every year was the same state and/or the 
same activity making the biggest money by exportation, or if this changed 
with the time. Unfortunately, our figure with the total exportation per 
year grouped by state is quite messy and difficult to appreciate due to 
the big number of states. Thus we need a different approach to that

#+BEGIN_SRC python :session
ex_cols[['year', 'state', 'Total']].\
    iloc[ex_cols.groupby('year').\
         idxmax()['Total']]

## Here we used iloc, which choses location of certain rows
ex_cols.iloc[[1,3,7]] # rows 1, 3 and 7

## and idxmax which finds row location of the max values
ex_cols.groupby('year').idxmax()['Total']

#+END_SRC

Now per activity:

#+BEGIN_SRC python :session
ex_cols[['year', 'state', 'Total']].\
    iloc[ex_cols.\
         groupby('year').\
         idxmax()['Total']]

ex_rows.query('Activity != "Total"').groupby('year').

ex_rows.iloc[ex_rows.drop(['Código', 'Descripción'], axis = 'columns').\
             query('Activity != "Total"').\
             groupby('year').\
             idxmax()['USD']][['year', 'Activity', 'state']]
#+END_SRC

* Interactive visualisation

We can create specific functions using our data frames to look directly 
at a given state or activity in order to make our analysis easier and 
find specific patterns.

#+BEGIN_SRC python :session
## Function to choose main activity per state
def plot_state(estado, USD_min = 5000000):
    st_df = ex_rows.query('Activity != "Total"').\
        groupby(['state', 'Activity']).\
        agg({'USD':'sum'}).\
        reset_index().\
        query(str("state == '{}' & USD >= {}".format(estado, USD_min)))
    #return(st_df)
    #sb.palplot(sb.color_palette("Blues"))
    sb.set_palette("Blues_r")
    st_df.sort_values('USD', ascending=False).plot.bar(x = 'Activity')
    plt.ylabel("Total USD in exportations")
    plt.xlabel(None)
    plt.title(estado)

plot_state(estado = "Chihuahua")
plot_state("Baja California")
plot_state("Coahuila de Zaragoza")
plot_state("Nuevo León")
plot_state("Tamaulipas")
plot_state("Campeche", USD_min = 10000)
        
#+END_SRC
